// File: config/db.js
// config/db.js
import mongoose from 'mongoose';

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (error) {
    console.error('Error connecting to MongoDB:', error.message);
    process.exit(1);
  }
};

export default connectDB;

// File: controllers/authController.js
import asyncHandler from 'express-async-handler';
import User from '../models/User.js';
import generateToken from '../utils/generateToken.js';

// @desc    Register a new user
// @route   POST /api/account/signup
// @access  Public
const registerUser = asyncHandler(async (req, res) => {
  const { companyName, companyType, username, email, password } = req.body;

  const userExists = await User.findOne({ email });

  if (userExists) {
    res.status(400);
    throw new Error('User already exists');
  }

  const user = await User.create({
    companyName,
    companyType,
    username,
    email,
    password,
  });

  if (user) {
    res.status(201).json({
      _id: user._id,
      name: user.name,
      username: user.username,
      email: user.email,
      companyName: user.companyName, // Return companyName
      token: generateToken(user._id),
    });
  } else {
    res.status(400);
    throw new Error('Invalid user data');
  }
});

// @desc    Auth user & get token
// @route   POST /api/account/signin
// @access  Public
const authUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (user && (await user.matchPassword(password))) {
    res.json({
      _id: user._id,
      name: user.name,
      username: user.username,
      email: user.email,
      companyName: user.companyName, // Return companyName
      token: generateToken(user._id),
    });
  } else {
    res.status(401);
    throw new Error('Invalid email or password');
  }
});

export { registerUser, authUser };
  
// File: controllers/interviewBatchController.js
import asyncHandler from 'express-async-handler';
import InterviewBatch from '../models/InterviewBatch.js';

// @desc    Create a new interview batch
// @route   POST /api/interviewBatch
// @access  Private (requires authorization)
const createInterviewBatch = asyncHandler(async (req, res) => {
  // Extract form data
  const {
    companyName,
    totalCandidatesRequired,
    domains,
    skills,
    interviewTypes,
    deadline,
    csvFile,
  } = req.body;

  // Create new InterviewBatch instance
  const interviewBatch = new InterviewBatch({
    companyName,
    totalCandidatesRequired,
    domains,
    skills,
    interviewTypes,
    deadline,
    csvFile,
  });

  // Save interview batch to database
  const createdBatch = await interviewBatch.save();

  res.status(201).json(createdBatch);
});

export { createInterviewBatch };

// File: middleware/authMiddleware.js
// middleware/authMiddleware.js
import jwt from 'jsonwebtoken';
import User from '../models/User.js';
import InterviewBatch from '../models/InterviewBatch.js';

const authMiddleware = async (req, res, next) => {
  const token = req.header('Authorization');

  if (!token) {
    return res.status(401).json({ message: 'Authorization token required' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id).select('-password');
    req.user = user;

    // Check if user has necessary permissions
    if (user.role === 'admin') {
      // Admin can fetch all interview batches
      next();
    } else {
      // Non-admin user can fetch interview batches associated with their company
      const interviewBatches = await InterviewBatch.find({ companyName: user.companyName });
      req.interviewBatches = interviewBatches;
      next();
    }
  } catch (error) {
    console.error('Authentication error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
};

export default authMiddleware;

// File: models/InterviewBatch.js
// models/interviewBatchSchema.js
import mongoose from 'mongoose';

const interviewBatchSchema = new mongoose.Schema({
  companyName: { type: String, required: true },
  totalCandidatesRequired: { type: Number, required: true },
  domains: { type: String, required: true },
  skills: { type: [String], required: true },
  interviewTypes: { type: [String], required: true },
  deadline: { type: Date, required: true },
  csvFile: { type: String, required: true },
}, {
  timestamps: true,
});

export default mongoose.model('InterviewBatch', interviewBatchSchema);

// File: models/User.js
// models/User.js
import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const userSchema = new mongoose.Schema({
  companyName: { type: String, required: true },
  companyType: { type: String, required: true },
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
}, {
  timestamps: true
});

// Encrypt password before saving
userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) {
    next();
  }
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
});

userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model('User', userSchema);

export default User;

// File: routes/authRoutes.js
// routes/authRoutes.js
import express from 'express';
import { registerUser, authUser } from '../controllers/authController.js';

const router = express.Router();

router.post('/signup', registerUser);
router.post('/signin', authUser);

export default router;

// File: routes/getInterviewBatchRoutes.js
import express from 'express';
import InterviewBatch from '../models/InterviewBatch.js';
import authMiddleware from '../middleware/authMiddleware.js'; // Assuming you have authentication middleware

const router = express.Router();

// Fetch interview batches for logged-in user's company
router.get('/interviewBatch', authMiddleware, async (req, res) => {
  const companyName = req.user.companyName; // Assuming company name is stored in req.user

  try {
    const interviewBatches = await InterviewBatch.find({ companyName });
    res.status(200).json(interviewBatches);
  } catch (error) {
    console.error('Error fetching interview batches:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

export default router;

// File: routes/interviewBatchRoutes.js
// routes/interviewBatchRoutes.js
import express from 'express';
import InterviewBatch from '../models/InterviewBatch.js';
import multer from 'multer';

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });
const router = express.Router();

// Create a new interview batch
router.post('/interviewBatch', upload.single('csvFile'), async (req, res) => {
  try {
    const interviewBatch = new InterviewBatch({
      companyName: req.body.companyName,
      totalCandidatesRequired: req.body.totalCandidatesRequired,
      domains: req.body.domains,
      skills: JSON.parse(req.body.skills),
      interviewTypes: JSON.parse(req.body.interviewTypes),
      deadline: req.body.deadline,
      csvFile: req.file.buffer.toString('base64')
    });

    await interviewBatch.save();
    res.status(201).json({ message: 'Interview batch created successfully' });
  } catch (error) {
    console.error('Error creating interview batch:', error);
    res.status(400).json({ message: error.message });
  }
});

export default router;

// File: routes/meetingRoutes.js
import express from 'express';
import jwt from 'jsonwebtoken';

const router = express.Router();

router.post('/getAuthKey', (req, res) => {
  try {
    const API_KEY = '76b0317a-7d29-4823-8694-351b513fb296';
    const SECRET = '24c366883381e5d923d60d24689057102e826bb14ed742f69f0a95d8a5acb1df';

    const options = {
      expiresIn: '120m',
      algorithm: 'HS256'
    };
    const payload = {
      apikey: API_KEY,
      permissions: [`allow_join`], // `ask_join` || `allow_mod`
      // version: 2, //OPTIONAL
      // roomId: `2kyv-gzay-64pg`, //OPTIONAL
      // participantId: `lxvdplwt`, //OPTIONAL
      // roles: ['crawler', 'rtc'], //OPTIONAL
    };

    const token = jwt.sign(payload, SECRET, options);
    console.log(token);
    res.status(201).send(token);

  } catch (error) {
    console.log(error);
  }
});

export default router;

// File: routes/sendEmails.js
import express from 'express';
import nodemailer from 'nodemailer';
import User from '../models/User.js';

const router = express.Router();

router.post('/', async (req, res) => {
  const { emails } = req.body;

  try {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USERNAME,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const promises = emails.map(async (email) => {
      const randomPassword = Math.random().toString(36).slice(-8);

      const newUser = new User({
        email,
        password: randomPassword,
      });

      await newUser.save();

      await transporter.sendMail({
        from: process.env.EMAIL_USERNAME,
        to: email,
        subject: 'Your Account Credentials',
        text: `Your email: ${email}\nYour password: ${randomPassword}`,
      });
    });

    await Promise.all(promises);

    res.status(200).json({ message: 'Emails sent and users created successfully' });
  } catch (error) {
    console.error('Error sending emails and creating users:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
});

export default router;

